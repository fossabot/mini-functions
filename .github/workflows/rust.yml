name: ‚ùØ rust

on: [push, pull_request]

jobs:
  rust:
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        include:
          # @see https://doc.rust-lang.org/nightly/rustc/platform-support.html

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)

          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu # 64-bit Windows (7 or later)

          - os: windows-latest
            target: x86_64-pc-windows-msvc # 64-bit Windows (7 or later)

          - os: macOS-latest
            target: x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)

          - os: macOS-latest
            target: aarch64-apple-darwin # ARM64 macOS (10.15 Catalina or later)

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository üõéÔ∏è
        id: checkout
        uses: actions/checkout@v3

      - name: Install Rust ü¶Ä
        id: rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install rustfmt ü¶Ä
        id: install-rustfmt
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt
          override: true
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Run rustfmt ü¶Ä
        id: rustfmt
        run: rustup component add rustfmt

      - name: Check formatting ü¶Ä
        id: fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check --verbose --color=always

      - name: Print target üéØ
        run: echo ${{ matrix.target }}

      - name: Set environment variables
        run: |
          echo "VERSION=$(echo $(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2))" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=mini-functions-${{ matrix.target }}-v${{ env.VERSION }}" >> $GITHUB_ENV

      # - name: Print package version üì¶
      #   run: echo $(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
      # cargo metadata --format-version 1 | jq '.packages[1].version'
      - name: Build libraries üèó
        run: |
          # Check the code base

          cargo check --all
          # Install cross
          cargo install cross

          # Clean the build artifacts
          cargo clean

          # Build the libraries for the target platform and architecture
          cross build --release --target=${{ matrix.target }} --lib

        shell: /bin/bash -e {0}

      - name: Set environment variables
        env:
          VERSION: $(echo $(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2))
          ARTIFACT_NAME: mini-functions-${{ matrix.target }}-v${{ env.VERSION }}
        run: |
          # You can use the environment variables here
          echo $VERSION
          echo $ARTIFACT_NAME

      - name: Upload artifacts üì¶
        id: upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: target/release
          generate_release_notes: true
          files: |
            target/release/${{ matrix.target }}/libmini_functions_${{ env.VERSION }}.a
            target/release/${{ matrix.target }}/libmini_functions_${{ env.VERSION }}.so
            target/release/${{ matrix.target }}/libmini_functions_${{ env.VERSION }}.dll
            target/release/${{ matrix.target }}/libmini_functions_${{ env.VERSION }}.dylib
            target/release/${{ matrix.target }}/libmini_functions_${{ env.VERSION }}.lib
            target/release/${{ matrix.target }}/libmini_functions_${{ env.VERSION }}.rlib
