name: ❯ release

on: [push, pull_request]

jobs:
  mini_functions_release:
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache cargo registry 🧑‍💼
        id: cache-cargo-registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build 🚀
        id: cache-cargo-build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Toolchain 🛠
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build libraries 🏗
        run: |
          cargo install cross
          cargo clean
          cross build --release --target=${{ matrix.target }} --lib
      - name: Cache build artifacts 🧑‍💼
        id: cache-build-artifacts
        uses: actions/cache@v2
        with:
          path: target/${{ matrix.target }}/release
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Test 🧪
        id: test
        run: |
          cargo test --all

      - name: Extract version number 📜
        id: version
        run: |
          # Extract the version number from Cargo.toml
          version=$(grep version Cargo.toml | cut -d '"' -f 2)

          # Set the version variable as an environment variable
          echo 'version=$version'

      - name: Package 📦
        id: package
        run: |
          version=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "version=$version"
          mkdir -p packages
          mv target/${{ matrix.target }}/release/libmini_functions.rlib packages/libmini_functions-${version}.rlib
          tar -czvf packages/mini_functions-${version}.tar.gz packages/libmini_functions-${version}.rlib

      - name: Checkout 🛒
        id: checkout
        uses: actions/checkout@v3

      - name: Generate Changelog 📜
        id: changelog
        run: |

          # Add a header to the changelog
          echo "# Mini Functions 🦀 v$version" > ${{ github.workspace }}-CHANGELOG.md

          # Generate a changelog based on the commit history
          git log --oneline --decorate --color | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | awk '{print "* "$0}' >> CHANGELOG.md

          # Append the commit history to the changelog
          cat CHANGELOG.md >> ${{ github.workspace }}-CHANGELOG.md

      - name: Create Release 🚀
        # if: github.event_name != 'pull_request'
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          files: ${{ github.workspace }}/packages/libmini_functions-${{ env.version }}.tar.gz
          name: Mini Functions 🦀 v0.0.7
          tag_name: v${{ env.version }}
          release_name: Mini Functions 🦀 v${{ env.version }}
          draft: true
          prerelease: false
